name: Rust Release Docker Image

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: spike2044/kube-eye-export-server

jobs:
  build-amd64:
    name: Build and Push amd64 Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push amd64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64  # 明确指定平台
          provenance: false       # <--- 关键改动：禁用 provenance
          sbom: false             # <--- 建议添加：禁用 SBOM 生成
          tags: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64
          # outputs: type=image,name=${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64,push=true # 此行可以保留或移除，tags 参数已足够

  build-arm64:
    name: Build and Push arm64 Image
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push arm64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64  # 明确指定平台
          provenance: false       # <--- 关键改动：禁用 provenance
          sbom: false             # <--- 建议添加：禁用 SBOM 生成
          tags: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64
          # outputs: type=image,name=${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64,push=true # 此行可以保留或移除

  manifest:
    name: Create and Push Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          echo "Creating manifest for ${{ env.IMAGE_NAME }}:${{ github.ref_name }} with amd64 and arm64 images"
          echo "Amending with amd64: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64"
          echo "Amending with arm64: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64"

          # 在创建前可以尝试拉取一下，确保本地获取到的是最新的、非 manifest list 的镜像
          # 不过如果上面的 build-push 行为正确，这一步应该不是必须的
          # docker pull ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64
          # docker pull ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64

          docker manifest create ${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
            --amend ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64 \
            --amend ${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64
          
          echo "Inspecting created manifest:"
          docker manifest inspect ${{ env.IMAGE_NAME }}:${{ github.ref_name }}

          echo "Pushing manifest ${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          docker manifest push ${{ env.IMAGE_NAME }}:${{ github.ref_name }}